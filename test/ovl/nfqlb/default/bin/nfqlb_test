#! /bin/sh
##
## nfqlb_test --
##
##   Test script for nfqlb executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_version() {
	tlog "Using nfqlb version $(nfqlb version)"
}

cmd_tcase_nfqueue_activate_all() {
	tcase "nfqueue activate all"
	local n
	for n in $(seq 1 $__nvm); do
		nfqlb activate $((n + 100))
	done
	nfqlb show --shm=nfqlbLb > /dev/null 2&>1 || return 0
	test -n "$__nrouters" || __nrouters=1
	for n in $(seq 1 $__nrouters); do
		nfqlb activate --shm=nfqlbLb $((n + 200))
	done
}

cmd_tcase_nfqueue_activate_default_flow() {
	tcase "nfqueue activate default flow"
	nfqlb init --shm=nfqlb --M=900 --N=20
	nfqlb flow-set --name=default --target=nfqlb || tdie
	cmd_tcase_nfqueue_activate_all
}

cmd_tcase_nfqueue_flow_vms() {
	tcase "Create flows to individual vm's"
	local target
	for n in $(seq 1 $__nvm); do
		target=$(printf "vm-%03u" $n)
		nfqlb init --shm=$target --M=900 --N=20
		nfqlb activate --shm=$target $((n + 100))
		nfqlb flow-set --name=$target --target=$target --protocols=tcp,udp \
			--prio=100 --srcs=20.0.0.$n/32,1000::1:20.0.0.$n/128
	done
	nfqlb flow-list
}

mconnect_check_vm() {
	cat $tmp/out | jq
	cat $tmp/out | jq ".hosts.\"$1\"" | grep '^100$' || tdie "$1"
}
cmd_tcase_mconnect_vmflow() {
	local proto=tcp
	test -n "$1" && proto=$1
	tcase "Mconnect to vm's using flows [$proto]"
	mkdir -p $tmp
	local vm arg
	test "$proto" = "udp" && arg=-udp
	for n in $(seq 1 $__nvm); do
		vm=$(printf "vm-%03u" $n)
		echo "Flow to $vm"
		mconnect -address 10.0.0.0:5001 -nconn 100 $arg \
			-srccidr=20.0.0.$n/32 -output json > $tmp/out || tdie
		mconnect_check_vm $vm
		mconnect -address [1000::]:5001 -nconn 100 $arg \
			-srccidr=1000::1:20.0.0.$n/128 -output json > $tmp/out || tdie
		mconnect_check_vm $vm
	done
}


cmd_tcase_mconnect() {
	test -n "$__vip" || __vip="[1000::]:5001"
	tcase "Mconnect to; $__vip"
	local srccidr=$PREFIX:$XADDR/112
	echo $__vip | grep -Fq '[' || srccidr=$XADDR/16
	do_mconnect $__vip -srccidr $srccidr
}

cmd_tcase_mconnect_udp() {
	test -n "$__vip" || __vip="[1000::]:5001"
	tcase "Mconnect with UDP to; $__vip"
	local srccidr=$PREFIX:$XADDR/112
	echo $__vip | grep -Fq '[' || srccidr=$XADDR/16
	do_mconnect $__vip -srccidr $srccidr -udp
}
cmd_tcase_ping() {
	test -n "$__vip" || __vip="1000::"
	tcase "Ping to; $__vip"
	local i
	# Ping is load-balanced (on id) so we do a bunch of them
	for i in $(seq 1 20); do
		ping -c1 -W1 $__vip || tdie ping
	done
}
cmd_tcase_negative_tcp() {
	test -n "$__vip" || __vip="1000::"
	tcase "Test tcp NOT working to; $__vip"
	nc -w1 $__vip && tdie "Tcp works to $__vip"
	return 0
}

cmd_tcase_fragrev() {
	which tap-scrambler_test > /dev/null || die "No tap-scrambler_test"
	tap-scrambler_test tcase_tap
	tap-scrambler fragrev --tap=tap2 > /var/log/tap-scrambler.log 2>&1 &
}

cmd_tcase_udp() {
	test -n "$__vip" || __vip="[1000::]:6003"
	tcase "Test UDP traffic to; $__vip"
	test -n "$__copt" || __copt="-monitor -psize 2048 -rate 1000 -nconn 40 -timeout 20s"
	test -n "$LBOPT" && tlog "LBOPT=[$LBOPT]"
	tlog "ctraffic opts; $__copt"
	local srccidr=$PREFIX:$XADDR/112
	echo $__vip | grep -Fq '[' || srccidr=$XADDR/16
	mkdir -p $tmp
	ctraffic -udp -address $__vip -srccidr $srccidr $__copt > $tmp/out || tdie ctraffic
	test "$__verbose" = "yes" && jq < $tmp/out >&2
	# We accept 1% packet loss
	local sent rec drop loss
	sent=$(jq -r .Sent < $tmp/out)
	rec=$(jq -r .Received < $tmp/out)
	drop=$(jq -r .Dropped < $tmp/out)
	loss=$(( (sent + drop - rec) * 100 / (sent + drop) ))
	test $loss -le 1 || tdie "Lost traffic $loss%"
	tlog "Lost traffic $loss%"
}

cmd_tcase_nfqlb_stats() {
	tcase "nfqlb fragment stats"
	nfqlb stats >&2
	echo "  Q       port inq cp   rng  Qdrop  Udrop      Seq" >&2
	cat /proc/net/netfilter/nfnetlink_queue | format_stats >&2
}
format_stats() {
	local line s
	while read line; do
		s=$(echo $line | tr -s ' ' :)
		# Q port(pid) inQ cpmode range Qdroped usrDropped lastSeq 1
		local Q=$(echo $s | cut -d: -f1)
		local port=$(echo $s | cut -d: -f2)
		local inQ=$(echo $s | cut -d: -f3)
		local cp=$(echo $s | cut -d: -f4)
		local rng=$(echo $s | cut -d: -f5)
		local Qdrop=$(echo $s | cut -d: -f6)
		local Udrop=$(echo $s | cut -d: -f7)
		local seq=$(echo $s | cut -d: -f8)
		printf "%3u %10u %3u  %u %5u %6u %6u %8u\n"\
			$Q $port $inQ $cp $rng $Qdrop $Udrop $seq
	done
}

cmd_tcase_hw_server() {
	test -n "$__vip" || __vip=10.0.0.0/32
	echo 0 > /proc/sys/net/ipv6/conf/eth1/accept_dad
	local gw
	if echo $__vip | grep -q :; then
		#gw=$PREFIX:10.10.0.1
		gw=$PREFIX:192.168.1.201
		ip -6 addr add $PREFIX:10.10.0.0/127 dev eth1
	else
		gw=192.168.1.201
		ip addr add 10.10.0.0/31 dev eth1
	fi
	tcase "HW-setup; Start server, vip=$__vip, gw=$gw"
	tex ping -c1 -W1 -q $gw
	export __sudo=env
	nfqlb_performance.sh start_server --gw=$gw --vip=$__vip || tdie
}
cmd_tcase_hw_netns() {
	tcase "HW-setup; Setup netns"
	ethtool -K eth1 gro off gso off tso off
	echo 0 > /proc/sys/net/ipv6/conf/eth1/accept_dad
	export __sudo=env
	nfqlb_performance.sh test_netns --iface=eth1
}

cmd_tcase_http() {
	local url="http://10.0.0.0"
	if test -n "$1"; then
		url=$1
		shift
	fi
	tcase "curl $url"
	curl $@ $url > /dev/null || tdie "curl $@ $url"
}

cmd_tcase_vip_route() {
	tcase "Setup VIP route to [$1]"
	ip ro add 10.0.0.0/24 via $1
	ip -6 ro add 1000::/120 via $PREFIX:$1
}

cmd_tcase_default_route() {
	tcase "Setup default route to [$1]"
	local ip=ip
	echo $1 | grep -q : && ip="ip -6"
	$ip route replace default via $1 || tdie
}

cmd_tcase_sctpt_start() {
	tcase "Start SCTP traffic in background [$@]"
	test -n "$__out" || __out=/tmp/sctpt.out
	sctpt stats clear
	sctpt ctraffic --log=6 --laddr=192.168.2.221,1000::1:192.168.6.221 $@ \
		> $__out 2> /dev/null &
}
cmd_tcase_sctpt_wait() {
	test -n "$__timeout" || __timeout=60
	pushv $__timeout
	tcase "Wait for all sctpt processes to stop ($__timeout)"
	tex check_sctpt
	sctpt stats json
}
check_sctpt() {
	if ps www | grep -v grep | grep -F 'sctpt '; then
		tlog "Sctpt still running..."
		return 1
	fi
	return 0
}
cmd_tcase_sctpt_stats() {
	tcase "Check sctpt stats"
	local sent=$(sctpt stats json | jq .sent)
	local received=$(sctpt stats json | jq .received)
	local maxrtt=$(sctpt stats json | jq .maxRtt)
	tlog "Sent=$sent, received=$received, maxrtt=$maxrtt"
	test $sent -eq $received || tdie
	test $maxrtt -lt 5000 || tdie
}
cmd_tcase_iptables() {
	tcase "Iptables [$@]"
	iptables $@
	return 0
}
cmd_tcase_nsctpconn() {
	local n=$(grep -F 'Got a new connection' /var/log/sctpt.log | wc -l)
	tcase "SCTP connections [$n]"
	test $n -gt 0 || tdie
}

cmd_range64() {
	local i=0
	local range="80-500,5000-5010"
	local first=10000
	while test $i -lt 62; do
		range="$range,$first-$((first+10))"
		first=$((first + 20))
		i=$((i + 1))
	done
	echo $range
}

cmd_tcase_range64() {
	tcase "Define a port range with 64 entries"
	nfqlb flow-set --name=port64 --target=nfqlb --protocols=tcp --prio=200 \
		--dports=$(cmd_range64) || tdie
	nfqlb flow-list --name port64
	test $(nfqlb flow-list --name port64 | jq '.dports | length') -eq 64 || tdie
}

cmd_tcase_udpencap_flow() {
	tcase "Setup a SCTP flow with UDP encapsulation"
	nfqlb init --shm=nfqlb --M=900 --N=20 || tdie
	nfqlb flow-set --name=sctp --target=nfqlb --proto=sctp --udpencap=9899 \
		--prio=100 --dsts=10.0.0.0/32,1000::/128 --dport=6000 || tdie
	nfqlb flow-list
}

cmd_tcase_sctp_server_udpencap() {
	tcase "Restart the sctpt server with udp encapsulation"
	killall sctpt || tdie
	sysctl -w net.sctp.encap_port=9899 2>&1
	sysctl -w net.sctp.udp_port=9899 2>&1
	sctpt server --log=6 --addr=10.0.0.0,1000:: \
		> /var/log/sctpt.log 2>&1 < /dev/null &
}

cmd_tcase_sctp_ctraffic() {
	tcase "Run SCTP traffic. 1000 pkt/S for 10s"
	if test -n "$__udpencap"; then
		modprobe sctp
		sysctl -w net.sctp.encap_port=$__udpencap
		sysctl -w net.sctp.udp_port=$__udpencap
	fi
	mkdir -p $tmp
	local out=$tmp/out
	sctpt ctraffic --clients=16 --rate=1000 --addr=10.0.0.0,1000:: \
		--laddr=192.168.2.221,1000::1:192.168.2.221 > $out || tdie
	sctpt stats
	local sent=$(cat $out | jq .sent)
	local received=$(cat $out | jq .received)
	test $sent -eq $received || tdie "sent=$sent, received=$received"
	tlog "Packets; $sent"
	test $sent -gt 9900 || tdie "Too few packets"
}

cmd_tcase_clear_flows() {
	tcase "Clear all flows"
	local flow
	for flow in $(nfqlb flow-list-names | jq -r .[]); do
		nfqlb flow-delete --name=$flow || tdie "flow-delete $flow"
	done	
}
cmd_tcase_tcp_udp_flow() {
	cmd_tcase_clear_flows
	tcase "Set a tcp,udp flow"
	nfqlb flow-set --name=tcpudp --target=nfqlb --prio=100 --protocols=tcp,udp \
		--dsts=10.0.0.0/24,1000::/120 --dport=80,5001-5003 || tdie flow-set
	nfqlb flow-list
}

cmd_tcase_tcp_flow_match() {
	test -n "$1" || tdie "No match"
	local match="$1"
	cmd_tcase_clear_flows
	tcase "Set a tcp flow with match; $match"
	nfqlb flow-set --name=tcpmatch --target=nfqlb --prio=100 --protocols=tcp \
		--dsts=10.0.0.0/24,1000::/120 --match="$match" || tdie flow-set
	nfqlb flow-list
}

cmd_tcase_sctp_set_flow_match() {
	cmd_tcase_clear_flows
	test -n "$1" || tdie "No match"
	local match="$1"
	tcase "Set a sctp flow with match; $match"
	nfqlb flow-set --name=sctpmatch --target=nfqlb --prio=100 --protocols=sctp \
		--dsts=10.0.0.0/24,1000::/120 --match="$match" || tdie flow-set
	nfqlb flow-list
}

cmd_tcase_sctp_encap_set_flow_match() {
	cmd_tcase_clear_flows
	test -n "$1" || tdie "No match"
	local match="$1"
	tcase "Set a sctp flow with UDP-encap and match; $match"
	nfqlb flow-set --name=sctpmatch --target=nfqlb --prio=100 --protocols=sctp \
		--dsts=10.0.0.0/24,1000::/120 --match="$match" --udpencap=9899 \
		|| tdie flow-set
	nfqlb flow-list
}
cmd_tcase_sctp_negative() {
	tcase "Test that SCTP connect does NOT work"
	echo Kalle | sctpt client --laddr=192.168.2.221,1000::1:192.168.2.221 \
		--addr=10.0.0.0,1000:: && tdie "SCTP works when it should NOT"
	return 0
}


. /etc/profile
. /usr/lib/xctest
indent='  '

test -n "$PREFIX" || PREFIX=1000::1
test -n "$XADDR" || XADDR=20.0.0.0


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		if echo "$1" | grep -q '^--$'; then
			shift
			break
		fi
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
